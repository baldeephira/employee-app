apply plugin: 'war'

repositories {
   mavenLocal()
   mavenCentral()
}

configurations {
	//exclude commons logging from the war, as we don't want
	//spring to be using commons logging, instead we will
	//globally configure log4j2 in jetty/tomcat container
	runtime.exclude group: 'commons-logging', name: 'commons-logging'
}

dependencies {
	compile project(':model')
	compile 'com.google.code.gson:gson:2.2.4'
	compile 'org.springframework:spring-beans:4.0.5.RELEASE'
	compile 'org.springframework:spring-core:4.0.5.RELEASE'
	compile 'org.springframework:spring-context:4.0.5.RELEASE'
	compile 'org.springframework:spring-jdbc:4.0.5.RELEASE'
	compile 'org.springframework:spring-tx:4.0.5.RELEASE'
	compile 'org.springframework:spring-web:4.0.5.RELEASE'
	compile 'org.springframework:spring-webmvc:4.0.5.RELEASE'
	compile 'org.aspectj:aspectjweaver:1.8.0'
	compile 'mysql:mysql-connector-java:5.1.30'

	//we use jetty logging module, that already includes
	//slf4j-api, hence we don't include this in the war
	providedCompile 'org.slf4j:slf4j-api:1.7.7'

	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

	//compile 'org.slf4j:slf4j-api:1.7.7'
	//compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.0-rc1'
	//compile 'org.apache.logging.log4j:log4j-api:2.0-rc1'
	//compile 'org.apache.logging.log4j:log4j-core:2.0-rc1'

	testCompile 'junit:junit:4.11'
}

task deploy (dependsOn: build) << {
	def warFile = file("${libsDir}/${project.name}-${version}.war")
	def outputDir = file("${jettyHome}/webapps/api")
	delete outputDir
	outputDir.mkdirs()

	println "copying war contents to ${outputDir}"
	copy {
		from zipTree(warFile)
		into outputDir
	}
}